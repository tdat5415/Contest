{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cnn_test","provenance":[],"collapsed_sections":[],"mount_file_id":"12Qs-3_ZZXaCauPLtWx6Ve0HyzK-Qwo-n","authorship_tag":"ABX9TyNoKRR0LJ5d1ahfTmVYIw56"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"nEIZpXv4r33K","executionInfo":{"status":"ok","timestamp":1602924130980,"user_tz":-540,"elapsed":1166,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}}},"source":["import os\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import keras\n","from tqdm import tqdm\n","from glob import glob\n","from keras.models import Sequential, Model\n","from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, BatchNormalization, Dropout, Activation, Input, Concatenate\n","from keras.callbacks import ModelCheckpoint, EarlyStopping\n","from keras import optimizers\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.model_selection import train_test_split\n","import copy\n","from keras.regularizers import l2, l1\n","from keras.utils import to_categorical"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"YP2jJLIcvXwn"},"source":["# 데이터 가져오는 코드\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rjPE5sX9uU2k"},"source":["X_train = ??? # shape(999,256,256)\n","Y_train = ??? # shape(999,2)  # 0인경우 (1,0) # 1인경우 (0,1)\n","\n","# 차원을 늘린다.\n","X_train = X_train.reshape(-1, 256, 256, 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CoVkO3VruU4y","executionInfo":{"status":"ok","timestamp":1602925270067,"user_tz":-540,"elapsed":824,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}}},"source":["#모델 모양\n","\n","def build_model():\n","  model = Sequential()\n","\n","  # input_shape=(-1, 256, 256, 1)\n","\n","  model.add(Conv2D(32, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001), input_shape=(256, 256, 1)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(32, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(MaxPooling2D())\n","  model.add(BatchNormalization())\n","  model.add(Dropout(rate=0.3))\n","  # shape(-1, 32, 128, 128, 1)\n","\n","  model.add(Conv2D(64, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(64, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(MaxPooling2D())\n","  model.add(BatchNormalization())\n","  model.add(Dropout(rate=0.3))\n","  # shape(-1, 64, 64, 64, 1)\n","\n","  model.add(Conv2D(128, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(128, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(128, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(MaxPooling2D())\n","  model.add(BatchNormalization())\n","  model.add(Dropout(rate=0.3))\n","  # shape(-1, 128, 32, 32, 1)\n","\n","  model.add(Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(MaxPooling2D())\n","  model.add(BatchNormalization())\n","  model.add(Dropout(rate=0.3))\n","  # shape(-1, 256, 16, 16, 1)\n","\n","  model.add(Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l1(0.001)))\n","  model.add(BatchNormalization())\n","  model.add(MaxPooling2D())\n","  model.add(BatchNormalization())\n","  model.add(Dropout(rate=0.3))\n","  # shape(-1, 256, 8, 8, 1)\n","\n","  model.add(Flatten()) # shape(-1, 32768)\n","\n","  model.add(Dense(4096, activation='relu'))\n","  model.add(Dropout(rate=0.3))\n","  model.add(Dense(1024, activation='relu'))\n","  model.add(Dropout(rate=0.3))\n","  model.add(Dense(2, activation='softmax'))\n","\n","  model.compile(loss=tf.keras.losses.KLDivergence(), optimizer='adam', metrics = ['accuracy'])\n","  # model.compile(\n","  #     loss=tf.keras.losses.sparse_categorical_crossentropy,\n","  #     optimizer=tf.keras.optimizers.SGD(learning_rate=0.003),\n","  #     metrics=['accuracy'])\n","  model.summary()\n","  \n","  return model"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"_0R9oDLnuU65"},"source":["!rm -r /content/model\n","\n","# 모델 폴더를 생성합니다.\n","model_path = 'model/'\n","if not os.path.exists(model_path):\n","  os.mkdir(model_path)\n","\n","# Validation 점수가 가장 좋은 모델만 저장합니다.\n","model_file_path = model_path + 'Epoch_{epoch:03d}_Val_{val_loss:.3f}.hdf5'\n","checkpoint = ModelCheckpoint(filepath=model_file_path, monitor='val_loss', verbose=1, save_best_only=True)\n","\n","# 10회 간 Validation 점수가 좋아지지 않으면 중지합니다.\n","early_stopping = EarlyStopping(monitor='val_loss', patience=10)\n","\n","\n","# tra_x, val_x, tra_y, val_y = train_test_split(\n","#     train_x, train_y, test_size = 0.2, shuffle=True)\n","\n","\n","# 모델을 학습시킵니다.\n","history = model1.fit(\n","    X_train, Y_train,\n","    epochs=100, \n","    batch_size=128, \n","    validation_split=0.2, \n","    # validation_data=(X_valid, Y_valid), \n","    callbacks=[checkpoint, early_stopping]\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k2q3nAJ7uU9E"},"source":["# 훈련 결과를 확인합니다.\n","plt.plot(history.epoch, history.history['loss'], '-o', label='training_loss')\n","plt.plot(history.epoch, history.history['val_loss'], '-o', label='validation_loss')\n","plt.legend()\n","plt.xlim(left=0)\n","plt.xlabel('epochs')\n","plt.ylabel('loss')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g40wDR-huU-m"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z8itXIY6uVAn"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hMvRRRmTuVEA"},"source":[""],"execution_count":null,"outputs":[]}]}